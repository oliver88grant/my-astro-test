---
// Accordion.astro
interface AccordionItem {
  title: string;
  content: string;
}

interface Props {
  items: AccordionItem[];
  className?: string;
}

const { items, className = '' } = Astro.props;
---

<div class={`accordion space-y-2 ${className}`}>
  {items.map((item, index) => (
    <div class="accordion-item border border-gray-200 rounded-lg overflow-hidden">
      <h2 class="accordion-header">
        <button 
          class="accordion-button cursor-pointer w-full text-left p-4 flex justify-between items-center hover:bg-gray-50 transition-colors"
          type="button"
          data-accordion-target={`#accordion-${index}`}
          aria-expanded="false"
        >
          <span class="font-semibold">{item.title}</span>
          <svg 
            class="w-6 h-6 transform transition-transform duration-300 accordion-icon" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24" 
            xmlns="http://www.w3.org/2000/svg"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </button>
      </h2>
      <div 
        id={`accordion-${index}`} 
        class="accordion-content overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"
      >
        <div class="p-4 bg-gray-50 text-gray-700">
          {item.content}
        </div>
      </div>
    </div>
  ))}
</div>

<script>
  class AccordionComponent {
    accordionButtons: NodeListOf<HTMLButtonElement>;

    constructor() {
      this.accordionButtons = document.querySelectorAll('[data-accordion-target]');
      this.setupEventListeners();
    }

    setupEventListeners() {
      this.accordionButtons.forEach(button => {
        button.addEventListener('click', () => this.toggleAccordion(button));
      });
    }

    toggleAccordion(button: HTMLButtonElement) {
      const targetId = button.getAttribute('data-accordion-target');
      const content = targetId ? document.querySelector(targetId) : null;
      const contentInner = content ? content.querySelector('div') : null;
      const icon = button.querySelector('.accordion-icon');
      const isExpanded = button.getAttribute('aria-expanded') === 'true';

      // Close all other accordions
      this.accordionButtons.forEach(otherButton => {
        if (otherButton !== button) {
          const otherTargetId = otherButton.getAttribute('data-accordion-target');
          const otherContent = otherTargetId ? document.querySelector(otherTargetId) : null;
          const otherContentInner = otherContent ? otherContent.querySelector('div') : null;
          const otherIcon = otherButton.querySelector('.accordion-icon');

          otherButton.setAttribute('aria-expanded', 'false');
          if (otherContent) {
            otherContent.classList.add('max-h-0', 'opacity-0');
            otherContent.classList.remove('max-h-screen', 'opacity-100');
          }
          if (otherIcon) {
            otherIcon.classList.remove('rotate-180');
          }
        }
      });

      // Toggle current accordion
      button.setAttribute('aria-expanded', (!isExpanded).toString());
      
      if (isExpanded) {
        // Closing
        if (content) {
          content.classList.add('max-h-0', 'opacity-0');
          content.classList.remove('max-h-screen', 'opacity-100');
        }
        if (icon) {
          icon.classList.remove('rotate-180');
        }
      } else {
        // Opening
        if (content) {
          content.classList.remove('max-h-0', 'opacity-0');
          content.classList.add('max-h-screen', 'opacity-100');
        }
        
        if (icon) {
          icon.classList.add('rotate-180');
        }
      }
    }
  }

  // Initialize accordion on DOM load
  document.addEventListener('DOMContentLoaded', () => {
    new AccordionComponent();
  });
</script>

<style>
  .accordion-content {
    transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out;
  }
</style>
